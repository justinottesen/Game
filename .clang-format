AccessModifierOffset:                         -2
AlignAfterOpenBracket:                        Align
AlignArrayOfStructures:                       Right
AlignConsecutiveAssignments:                  AcrossEmptyLinesAndComments
AlignConsecutiveBitFields:                    AcrossEmptyLinesAndComments
AlignConsecutiveDeclarations:                 AcrossEmptyLinesAndComments
AlignConsecutiveMacros:                       AcrossEmptyLinesAndComments
AlignEscapedNewlines:                         Left
AlignOperands:                                Align
AlignTrailingComments:                        true
AllowAllArgumentsOnNextLine:                  true
AllowAllParametersOfDeclarationOnNextLine:    true
AllowShortBlocksOnASingleLine:                Always
AllowShortCaseLabelsOnASingleLine:            true
AllowShortEnumsOnASingleLine:                 true
AllowShortFunctionsOnASingleLine:             Inline
AllowShortIfStatementsOnASingleLine:          WithoutElse
AllowShortLambdasOnASingleLine:               All
AllowShortLoopsOnASingleLine:                 true
AlwaysBreakAfterReturnType:                   None
AlwaysBreakBeforeMultilineStrings:            true
AlwaysBreakTemplateDeclarations:              Yes
AttributeMacros:                              []
BinPackArguments:                             true
BinPackParameters:                            true
BitFieldColonSpacing:                         Both
BraceWrapping:
  AfterCaseLabel:           false
  AfterClass:               false
  AfterControlStatement:    Never
  AfterEnum:                false
  AfterFunction:            false
  AfterNamespace:           false
  AfterObjCDeclaration:     false
  AfterStruct:              false
  AfterUnion:               false
  AfterExternBlock:         false
  BeforeCatch:              false
  BeforeElse:               false
  BeforeLambdaBody:         false
  BeforeWhile:              false
  IndentBraces:             false
  SplitEmptyFunction:       false
  SplitEmptyRecord:         false
  SplitEmptyNamespace:      false
BreakBeforeBinaryOperators:                   None
BreakBeforeBraces:                            Custom
BreakBeforeConceptDeclarations:               true
BreakBeforeTernaryOperators:                  true
BreakConstructorInitializers:                 AfterColon
BreakInheritanceList:                         AfterComma
BreakStringLiterals:                          true
ColumnLimit:                                  80
CommentPragmas:                               ''
CompactNamespaces:                            false
ConstructorInitializerIndentWidth:            4
ContinuationIndentWidth:                      4
Cpp11BracedListStyle:                         true
DerivePointerAlignment:                       false
DisableFormat:                                false
EmptyLineAfterAccessModifier:                 Never
EmptyLineBeforeAccessModifier:                LogicalBlock
FixNamespaceComments:                         true
ForEachMacros:                                []
IfMacros:                                     []
IncludeBlocks:                                Regroup
IncludeCategories:
  - Regex:           '^<ext/.*\.h>'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '^<.*\.h>'
    Priority:        1
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '^<.*'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '.*'
    Priority:        3
    SortPriority:    0
    CaseSensitive:   false
IncludeIsMainRegex: '([-_](test|unittest))?$'
IncludeIsMainSourceRegex: ''
IndentAccessModifiers:                        false
IndentCaseBlocks:                             false
IndentCaseLabels:                             true
IndentExternBlock:                            Indent
IndentGotoLabels:                             false
IndentPPDirectives:                           BeforeHash
IndentWidth:                                  2
IndentWrappedFunctionNames:                   true
InsertTrailingCommas:                         None
KeepEmptyLinesAtTheStartOfBlocks:             false
LambdaBodyIndentation:                        Signature
Language:                                     Cpp
MacroBlockBegin:                              ''
MacroBlockEnd:                                ''
MaxEmptyLinesToKeep:                          1
NamespaceIndentation:                         All
NamespaceMacros:                              []
ObjCBinPackProtocolList:                      Never
ObjCBlockIndentWidth:                         2
ObjCBreakBeforeNestedBlockParam:              true
ObjCSpaceAfterProperty:                       false
ObjCSpaceBeforeProtocolList:                  true
PPIndentWidth:                                -1
PackConstructorInitializers:                  BinPack
PenaltyBreakAssignment:                       2
PenaltyBreakBeforeFirstCallParameter:         1
PenaltyBreakComment:                          300
PenaltyBreakFirstLessLess:                    120
PenaltyBreakOpenParenthesis:                  0
PenaltyBreakString:                           1000
PenaltyBreakTemplateDeclaration:              10
PenaltyExcessCharacter:                       1000000
PenaltyIndentedWhitespace:                    0
PenaltyReturnTypeOnItsOwnLine:                200
PointerAlignment:                             Left
QualifierAlignment:                           Custom
QualifierOrder:                               ['static', 'inline', 'constexpr', 'volatile', 
                                               'const', 'type', 'restrict']
RawStringFormats:
  - Language:             Cpp
    Delimiters:
      - cc
      - CC
      - cpp
      - Cpp
      - CPP
      - 'c++'
      - 'C++'
    CanonicalDelimiter: ''
    BasedOnStyle:         google
  - Language:             TextProto
    Delimiters:
      - pb
      - PB
      - proto
      - PROTO
    EnclosingFunctions:
      - EqualsProto
      - EquivToProto
      - PARSE_PARTIAL_TEXT_PROTO
      - PARSE_TEST_PROTO
      - PARSE_TEXT_PROTO
      - ParseTextOrDie
      - ParseTextProtoOrDie
      - ParseTestProto
      - ParsePartialTestProto
    CanonicalDelimiter:   pb
    BasedOnStyle:         google
ReferenceAlignment:                           Pointer
ReflowComments:                               true
RemoveBracesLLVM:                             false
SeparateDefinitionBlocks:                     Always
ShortNamespaceLines:                          1
SortIncludes:                                 CaseSensitive
SortJavaStaticImport:                         Before
SortUsingDeclarations:                        true
SpaceAfterCStyleCast:                         false
SpaceAfterLogicalNot:                         false
SpaceAfterTemplateKeyword:                    true
SpaceAroundPointerQualifiers:                 Default
SpaceBeforeAssignmentOperators:               true
SpaceBeforeCaseColon:                         false
SpaceBeforeCpp11BracedList:                   false
SpaceBeforeCtorInitializerColon:              true
SpaceBeforeInheritanceColon:                  true
SpaceBeforeParens:                            ControlStatementsExceptControlMacros
SpaceBeforeRangeBasedForLoopColon:            true
SpaceBeforeSquareBrackets:                    false
SpaceInEmptyBlock:                            false
SpaceInEmptyParentheses:                      false
SpacesBeforeTrailingComments:                 2
SpacesInAngles:                               Never
SpacesInCStyleCastParentheses:                false
SpacesInConditionalStatement:                 false
SpacesInContainerLiterals:                    true
SpacesInLineCommentPrefix:
  Minimum:                1
  Maximum:                -1
SpacesInParentheses:                          false
SpacesInSquareBrackets:                       false
Standard:                                     Latest
StatementAttributeLikeMacros:                 []
StatementMacros:                              []
TabWidth:                                     8
TypenameMacros:                               []
UseTab:                                       Never
WhitespaceSensitiveMacros:                    []